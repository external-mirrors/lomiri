/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c AethercastDevice -p aethercast_device org.aethercast.xml org.aethercast.Device
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef AETHERCAST_DEVICE_H_1450292154
#define AETHERCAST_DEVICE_H_1450292154

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.aethercast.Device
 */
class AethercastDevice: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.aethercast.Device"; }

public:
    AethercastDevice(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~AethercastDevice();

    Q_PROPERTY(QString Address READ address)
    inline QString address() const
    { return qvariant_cast< QString >(property("Address")); }

    Q_PROPERTY(QStringList Capabilities READ capabilities)
    inline QStringList capabilities() const
    { return qvariant_cast< QStringList >(property("Capabilities")); }

    Q_PROPERTY(QString Name READ name)
    inline QString name() const
    { return qvariant_cast< QString >(property("Name")); }

    Q_PROPERTY(QString State READ state)
    inline QString state() const
    { return qvariant_cast< QString >(property("State")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Connect(const QString &role)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(role);
        return asyncCallWithArgumentList(QStringLiteral("Connect"), argumentList);
    }

    inline QDBusPendingReply<> Disconnect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Disconnect"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace aethercast {
    typedef ::AethercastDevice Device;
  }
}
#endif
